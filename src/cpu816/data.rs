use crate::cpu816::AddressMode;
use crate::cpu816::InstructionData;

use super::InstructionCycleInfo;
use super::InstructionLengthInfo;

pub const INST: [InstructionData; 256] = [
    InstructionData {
        code: 0x00,
        mnemonic: "brk",
        name: "Break/trap",
        example: Some("brk"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(8).me(),
        flag_result: "....01.. .",
    },
    InstructionData {
        code: 0x01,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora ($10,x)"),
        mode: AddressMode::DirectIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x02,
        mnemonic: "cop",
        name: "COProcessor operation",
        example: Some("cop #$12"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).me(),
        flag_result: "....01.. .",
    },
    InstructionData {
        code: 0x03,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora $32,s"),
        mode: AddressMode::StackRelative,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x04,
        mnemonic: "tsb",
        name: "Test and Set Bits",
        example: Some("tsb $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).m2m().pw(),
        flag_result: "......m. .",
    },
    InstructionData {
        code: 0x05,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x06,
        mnemonic: "asl",
        name: "Arithmetic Shift Left",
        example: Some("asl $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).m2m().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x07,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora [$10]"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x08,
        mnemonic: "php",
        name: "PusH Processor status register",
        example: Some("php"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(3),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x09,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mm(),
        cyc: InstructionCycleInfo::from_u8(3).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x0a,
        mnemonic: "asl",
        name: "Arithmetic Shift Left",
        example: Some("asl"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x0b,
        mnemonic: "phd",
        name: "PusH Direct register",
        example: Some("phd"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(4),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x0c,
        mnemonic: "tsb",
        name: "Test and Set Bits",
        example: Some("tsb $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(8).m2m(),
        flag_result: "......m. .",
    },
    InstructionData {
        code: 0x0d,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x0e,
        mnemonic: "asl",
        name: "Arithmetic Shift Left",
        example: Some("asl $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(8).m2m(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x0f,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora $fedcba"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x10,
        mnemonic: "bpl",
        name: "Branch if PLus",
        example: Some("bpl label"),
        mode: AddressMode::Relative8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(2).pt().ptep(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x11,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora ($10),y"),
        mode: AddressMode::DirectIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x12,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora ($10)"),
        mode: AddressMode::DirectIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(6).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x13,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora ($32,s),y"),
        mode: AddressMode::StackRelativeIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x14,
        mnemonic: "trb",
        name: "Test and Reset Bits",
        example: Some("trb $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).m2m().pw(),
        flag_result: "......m. .",
    },
    InstructionData {
        code: 0x15,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x16,
        mnemonic: "asl",
        name: "Arithmetic Shift Left",
        example: Some("asl $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).m2m().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x17,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora [$10],y"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x18,
        mnemonic: "clc",
        name: "CLear Carry",
        example: Some("clc"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: ".......0 .",
    },
    InstructionData {
        code: 0x19,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora $9876,y"),
        mode: AddressMode::AbsoluteIndexedY,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x1a,
        mnemonic: "inc",
        name: "Increment",
        example: Some("inc"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x1b,
        mnemonic: "tcs",
        name: "Transfer C accumulator to Stack pointer",
        example: Some("tcs"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x1c,
        mnemonic: "trb",
        name: "Test and Reset Bits",
        example: Some("trb $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(8).m2m(),
        flag_result: "......m. .",
    },
    InstructionData {
        code: 0x1d,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x1e,
        mnemonic: "asl",
        name: "Arithmetic Shift Left",
        example: Some("asl $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(9).m2m(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x1f,
        mnemonic: "ora",
        name: "OR with Accumulator",
        example: Some("ora $fedcba,x"),
        mode: AddressMode::LongAbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x20,
        mnemonic: "jsr",
        name: "Jump to SubRoutine",
        example: Some("jsr $1234"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x21,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and ($10,x)"),
        mode: AddressMode::DirectIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x22,
        mnemonic: "jsl",
        name: "Jump to SubRoutine Long",
        example: Some("jsl $123456"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(8),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x23,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and $32,s"),
        mode: AddressMode::StackRelative,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x24,
        mnemonic: "bit",
        name: "test BITs",
        example: Some("bit $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "mm....m. .",
    },
    InstructionData {
        code: 0x25,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x26,
        mnemonic: "rol",
        name: "ROtate Left",
        example: Some("rol $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).m2m().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x27,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and [$10]"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x28,
        mnemonic: "plp",
        name: "PulL Processor status register",
        example: Some("plp"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(4),
        flag_result: "******** .",
    },
    InstructionData {
        code: 0x29,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mm(),
        cyc: InstructionCycleInfo::from_u8(3).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x2a,
        mnemonic: "rol",
        name: "ROtate Left",
        example: Some("rol"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x2b,
        mnemonic: "pld",
        name: "PulL Direct register",
        example: Some("pld"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(5),
        flag_result: "*.....*. .",
    },
    InstructionData {
        code: 0x2c,
        mnemonic: "bit",
        name: "test BITs",
        example: Some("bit $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "mm....m. .",
    },
    InstructionData {
        code: 0x2d,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x2e,
        mnemonic: "rol",
        name: "ROtate Left",
        example: Some("rol $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(8).m2m(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x2f,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and $fedcba"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x30,
        mnemonic: "bmi",
        name: "Branch if MInus",
        example: Some("bmi label"),
        mode: AddressMode::Relative8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(2).pt().ptep(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x31,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and ($10),y"),
        mode: AddressMode::DirectIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x32,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and ($10)"),
        mode: AddressMode::DirectIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(6).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x33,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and ($32,s),y"),
        mode: AddressMode::StackRelativeIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x34,
        mnemonic: "bit",
        name: "test BITs",
        example: Some("bit $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "mm....m. .",
    },
    InstructionData {
        code: 0x35,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x36,
        mnemonic: "rol",
        name: "ROtate Left",
        example: Some("rol $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).m2m().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x37,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and [$10],y"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x38,
        mnemonic: "sec",
        name: "SEt Carry",
        example: Some("sec"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: ".......1 .",
    },
    InstructionData {
        code: 0x39,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and $9876,y"),
        mode: AddressMode::AbsoluteIndexedY,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x3a,
        mnemonic: "dec",
        name: "Decrement",
        example: Some("dec"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x3b,
        mnemonic: "tsc",
        name: "Transfer Stack pointer to C accumulator",
        example: Some("tsc"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "*.....*. .",
    },
    InstructionData {
        code: 0x3c,
        mnemonic: "bit",
        name: "test BITs",
        example: Some("bit $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "mm....m. .",
    },
    InstructionData {
        code: 0x3d,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x3e,
        mnemonic: "rol",
        name: "ROtate Left",
        example: Some("rol $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(9).m2m(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0x3f,
        mnemonic: "and",
        name: "AND with accumulator",
        example: Some("and $fedcba,x"),
        mode: AddressMode::LongAbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x40,
        mnemonic: "rti",
        name: "ReTurn from Interrupt",
        example: Some("rti"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(7).me(),
        flag_result: "******** .",
    },
    InstructionData {
        code: 0x41,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor ($10,x)"),
        mode: AddressMode::DirectIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x42,
        mnemonic: "wdm",
        name: "reserved by William D Mensch",
        example: Some("wdm"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x43,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor $32,s"),
        mode: AddressMode::StackRelative,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x44,
        mnemonic: "mvp",
        name: "MoVe memory Positive",
        example: Some("mvp #$12,#$34"),
        mode: AddressMode::BlockMove,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(7),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x45,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x46,
        mnemonic: "lsr",
        name: "Logical Shift Right",
        example: Some("lsr $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).m2m().pw(),
        flag_result: "0.....m* .",
    },
    InstructionData {
        code: 0x47,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor [$10]"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x48,
        mnemonic: "pha",
        name: "PusH Accumulator",
        example: Some("pha"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(4).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x49,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mm(),
        cyc: InstructionCycleInfo::from_u8(3).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x4a,
        mnemonic: "lsr",
        name: "Logical Shift Right",
        example: Some("lsr"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "0.....m* .",
    },
    InstructionData {
        code: 0x4b,
        mnemonic: "phk",
        name: "PusH K register",
        example: Some("phk"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(3),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x4c,
        mnemonic: "jmp",
        name: "JumP",
        example: Some("jmp $1234"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(3),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x4d,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x4e,
        mnemonic: "lsr",
        name: "Logical Shift Right",
        example: Some("lsr $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(8).m2m(),
        flag_result: "0.....m* .",
    },
    InstructionData {
        code: 0x4f,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor $fedcba"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x50,
        mnemonic: "bvc",
        name: "Branch if oVerflow Clear",
        example: Some("bvc label"),
        mode: AddressMode::Relative8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(2).pt().ptep(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x51,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor ($10),y"),
        mode: AddressMode::DirectIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x52,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor ($10)"),
        mode: AddressMode::DirectIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(6).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x53,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor ($32,s),y"),
        mode: AddressMode::StackRelativeIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x54,
        mnemonic: "mvn",
        name: "MoVe memory Negative",
        example: Some("mvn #$12,#$34"),
        mode: AddressMode::BlockMove,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(7),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x55,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x56,
        mnemonic: "lsr",
        name: "Logical Shift Right",
        example: Some("lsr $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).m2m().pw(),
        flag_result: "0.....m* .",
    },
    InstructionData {
        code: 0x57,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor [$10],y"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x58,
        mnemonic: "cli",
        name: "CLear Interrupt disable",
        example: Some("cli"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: ".....0.. .",
    },
    InstructionData {
        code: 0x59,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor $9876,y"),
        mode: AddressMode::AbsoluteIndexedY,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x5a,
        mnemonic: "phy",
        name: "PusH Y index",
        example: Some("phy"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(4).mx(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x5b,
        mnemonic: "tcd",
        name: "Transfer C accumulator to Direct register",
        example: Some("tcd"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "*.....*. .",
    },
    InstructionData {
        code: 0x5c,
        mnemonic: "jmp",
        name: "JumP",
        example: Some("jmp $fedcba"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(4),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x5d,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x5e,
        mnemonic: "lsr",
        name: "Logical Shift Right",
        example: Some("lsr $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(9).m2m(),
        flag_result: "0.....m* .",
    },
    InstructionData {
        code: 0x5f,
        mnemonic: "eor",
        name: "Exclusive OR with accumulator",
        example: Some("eor $fedcba,x"),
        mode: AddressMode::LongAbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x60,
        mnemonic: "rts",
        name: "ReTurn from Subroutine",
        example: Some("rts"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(6),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x61,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc ($10,x)"),
        mode: AddressMode::DirectIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x62,
        mnemonic: "per",
        name: "Push Effective Relative address",
        example: Some("per label"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x63,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc $32,s"),
        mode: AddressMode::StackRelative,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x64,
        mnemonic: "stz",
        name: "STore Zero",
        example: Some("stz $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x65,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x66,
        mnemonic: "ror",
        name: "ROtate Right",
        example: Some("ror $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).m2m().pw(),
        flag_result: "m.....m* .",
    },
    InstructionData {
        code: 0x67,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc [$10]"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x68,
        mnemonic: "pla",
        name: "PulL Accumulator",
        example: Some("pla"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x69,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mm(),
        cyc: InstructionCycleInfo::from_u8(3).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x6a,
        mnemonic: "ror",
        name: "ROtate Right",
        example: Some("ror"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "m.....m* .",
    },
    InstructionData {
        code: 0x6b,
        mnemonic: "rtl",
        name: "ReTurn from Long subtroutine",
        example: Some("rtl"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(6),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x6c,
        mnemonic: "jmp",
        name: "JumP",
        example: Some("jmp ($1234)"),
        mode: AddressMode::AbsoluteIndirect,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x6d,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x6e,
        mnemonic: "ror",
        name: "ROtate Right",
        example: Some("ror $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(8).m2m(),
        flag_result: "m.....m* .",
    },
    InstructionData {
        code: 0x6f,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc $fedcba"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x70,
        mnemonic: "bvs",
        name: "Branch if oVerflow Set",
        example: Some("bvs label"),
        mode: AddressMode::Relative8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(2).pt().ptep(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x71,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc ($10),y"),
        mode: AddressMode::DirectIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw().mx().pxp(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x72,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc ($10)"),
        mode: AddressMode::DirectIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(6).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x73,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc ($32,s),y"),
        mode: AddressMode::StackRelativeIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x74,
        mnemonic: "stz",
        name: "STore Zero",
        example: Some("stz $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x75,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x76,
        mnemonic: "ror",
        name: "ROtate Right",
        example: Some("ror $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).m2m().pw(),
        flag_result: "m.....m* .",
    },
    InstructionData {
        code: 0x77,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc [$10],y"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x78,
        mnemonic: "sei",
        name: "SEt Interrupt disable",
        example: Some("sei"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: ".....1.. .",
    },
    InstructionData {
        code: 0x79,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc $9876,y"),
        mode: AddressMode::AbsoluteIndexedY,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x7a,
        mnemonic: "ply",
        name: "PulL Y index",
        example: Some("ply"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(5).mx(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0x7b,
        mnemonic: "tdc",
        name: "Transfer Direct register to C accumulator",
        example: Some("tdc"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "*.....*. .",
    },
    InstructionData {
        code: 0x7c,
        mnemonic: "jmp",
        name: "JumP",
        example: Some("jmp ($1234,x)"),
        mode: AddressMode::AbsoluteIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x7d,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x7e,
        mnemonic: "ror",
        name: "ROtate Right",
        example: Some("ror $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(9).m2m(),
        flag_result: "m.....m* .",
    },
    InstructionData {
        code: 0x7f,
        mnemonic: "adc",
        name: "ADd with Carry",
        example: Some("adc $fedcba,x"),
        mode: AddressMode::LongAbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0x80,
        mnemonic: "bra",
        name: "BRanch Always",
        example: Some("bra label"),
        mode: AddressMode::Relative8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(3).pep(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x81,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta ($10,x)"),
        mode: AddressMode::DirectIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x82,
        mnemonic: "brl",
        name: "Branch long",
        example: Some("brl label"),
        mode: AddressMode::Relative16,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(4),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x83,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta $32,s"),
        mode: AddressMode::StackRelative,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x84,
        mnemonic: "sty",
        name: "STore Y index",
        example: Some("sty $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mx().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x85,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x86,
        mnemonic: "stx",
        name: "STore X index",
        example: Some("stx $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mx().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x87,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta [$10]"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x88,
        mnemonic: "dey",
        name: "DEcrement Y index",
        example: Some("dey"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0x89,
        mnemonic: "bit",
        name: "test BITs",
        example: Some("bit #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mm(),
        cyc: InstructionCycleInfo::from_u8(3).mm(),
        flag_result: "......m. .",
    },
    InstructionData {
        code: 0x8a,
        mnemonic: "txa",
        name: "Transfer X register to Accumulator",
        example: Some("txa"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x8b,
        mnemonic: "phb",
        name: "PusH data Bank register",
        example: Some("phb"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(3),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x8c,
        mnemonic: "sty",
        name: "STore Y index",
        example: Some("sty $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mx(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x8d,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x8e,
        mnemonic: "stx",
        name: "STore X index",
        example: Some("stx $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mx(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x8f,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta $fedcba"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x90,
        mnemonic: "bcc",
        name: "Branch if Carry Clear",
        example: Some("bcc label"),
        mode: AddressMode::Relative8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(2).pt().ptep(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x91,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta ($10),y"),
        mode: AddressMode::DirectIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x92,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta ($10)"),
        mode: AddressMode::DirectIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(6).mm().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x93,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta ($32,s),y"),
        mode: AddressMode::StackRelativeIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x94,
        mnemonic: "sty",
        name: "STore Y index",
        example: Some("sty $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mx().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x95,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x96,
        mnemonic: "stx",
        name: "STore X index",
        example: Some("stx $10,y"),
        mode: AddressMode::DirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mx().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x97,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta [$10],y"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x98,
        mnemonic: "tya",
        name: "Transfer Y register to Accumulator",
        example: Some("tya"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0x99,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta $9876,y"),
        mode: AddressMode::AbsoluteIndexedY,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x9a,
        mnemonic: "txs",
        name: "Transfer X register to Stack pointer",
        example: Some("txs"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x9b,
        mnemonic: "txy",
        name: "Transfer X register to Y index",
        example: Some("txy"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0x9c,
        mnemonic: "stz",
        name: "STore Zero",
        example: Some("stz $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x9d,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x9e,
        mnemonic: "stz",
        name: "STore Zero",
        example: Some("stz $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0x9f,
        mnemonic: "sta",
        name: "STore Accumulator",
        example: Some("sta $fedcba,x"),
        mode: AddressMode::LongAbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xa0,
        mnemonic: "ldy",
        name: "LoaD Y index",
        example: Some("ldy #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mx(),
        cyc: InstructionCycleInfo::from_u8(3).mx(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xa1,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda ($10,x)"),
        mode: AddressMode::DirectIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xa2,
        mnemonic: "ldx",
        name: "LoaD X index",
        example: Some("ldx #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mx(),
        cyc: InstructionCycleInfo::from_u8(3).mx(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xa3,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda $32,s"),
        mode: AddressMode::StackRelative,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xa4,
        mnemonic: "ldy",
        name: "LoaD Y index",
        example: Some("ldy $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mx().pw(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xa5,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xa6,
        mnemonic: "ldx",
        name: "LoaD X index",
        example: Some("ldx $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mx().pw(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xa7,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda [$10]"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xa8,
        mnemonic: "tay",
        name: "Transfer Accumulator to Y index",
        example: Some("tay"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xa9,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mm(),
        cyc: InstructionCycleInfo::from_u8(3).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xaa,
        mnemonic: "tax",
        name: "Transfer Accumulator to X index",
        example: Some("tax"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xab,
        mnemonic: "plb",
        name: "PulL data Bank register",
        example: Some("plb"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(4),
        flag_result: "*.....*. .",
    },
    InstructionData {
        code: 0xac,
        mnemonic: "ldy",
        name: "LoaD Y index",
        example: Some("ldy $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mx(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xad,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xae,
        mnemonic: "ldx",
        name: "LoaD X index",
        example: Some("ldx $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mx(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xaf,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda $fedcba"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xb0,
        mnemonic: "bcs",
        name: "Branch if Carry Set",
        example: Some("bcs label"),
        mode: AddressMode::Relative8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(2).pt().ptep(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xb1,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda ($10),y"),
        mode: AddressMode::DirectIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xb2,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda ($10)"),
        mode: AddressMode::DirectIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(6).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xb3,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda ($32,s),y"),
        mode: AddressMode::StackRelativeIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xb4,
        mnemonic: "ldy",
        name: "LoaD Y index",
        example: Some("ldy $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mx().pw(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xb5,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xb6,
        mnemonic: "ldx",
        name: "LoaD X index",
        example: Some("ldx $10,y"),
        mode: AddressMode::DirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mx().pw(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xb7,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda [$10],y"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xb8,
        mnemonic: "clv",
        name: "CLear oVerflow",
        example: Some("clv"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: ".0...... .",
    },
    InstructionData {
        code: 0xb9,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda $9876,y"),
        mode: AddressMode::AbsoluteIndexedY,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xba,
        mnemonic: "tsx",
        name: "Transfer Stack pointer to X index",
        example: Some("tsx"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xbb,
        mnemonic: "tyx",
        name: "Transfer Y register to X index",
        example: Some("tyx"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xbc,
        mnemonic: "ldy",
        name: "LoaD Y index",
        example: Some("ldy $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).m2x().pxp(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xbd,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xbe,
        mnemonic: "ldx",
        name: "LoaD X index",
        example: Some("ldx $9876,y"),
        mode: AddressMode::AbsoluteIndexedY,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).m2x().pxp(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xbf,
        mnemonic: "lda",
        name: "LoaD Accumulator",
        example: Some("lda $fedcba,x"),
        mode: AddressMode::LongAbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xc0,
        mnemonic: "cpy",
        name: "ComPare with Y index",
        example: Some("cpy #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mx(),
        cyc: InstructionCycleInfo::from_u8(3).mx(),
        flag_result: "x.....xx .",
    },
    InstructionData {
        code: 0xc1,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp ($10,x)"),
        mode: AddressMode::DirectIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xc2,
        mnemonic: "rep",
        name: "REset Processor status bits",
        example: Some("rep #$12"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(3),
        flag_result: "******** .",
    },
    InstructionData {
        code: 0xc3,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp $32,s"),
        mode: AddressMode::StackRelative,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xc4,
        mnemonic: "cpy",
        name: "ComPare with Y index",
        example: Some("cpy $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mx().pw(),
        flag_result: "x.....xx .",
    },
    InstructionData {
        code: 0xc5,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xc6,
        mnemonic: "dec",
        name: "Decrement",
        example: Some("dec $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).m2m().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xc7,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp [$10]"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xc8,
        mnemonic: "iny",
        name: "INcrement Y index",
        example: Some("iny"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xc9,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mm(),
        cyc: InstructionCycleInfo::from_u8(3).mm(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xca,
        mnemonic: "dex",
        name: "DEcrement X index",
        example: Some("dex"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xcb,
        mnemonic: "wai",
        name: "WAit for Interrupt",
        example: Some("wai"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(3),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xcc,
        mnemonic: "cpy",
        name: "ComPare with Y index",
        example: Some("cpy $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mx(),
        flag_result: "x.....xx .",
    },
    InstructionData {
        code: 0xcd,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xce,
        mnemonic: "dec",
        name: "Decrement",
        example: Some("dec $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(8).m2m(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xcf,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp $fedcba"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xd0,
        mnemonic: "bne",
        name: "Branch if Not Equal",
        example: Some("bne label"),
        mode: AddressMode::Relative8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(2).pt().ptep(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xd1,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp ($10),y"),
        mode: AddressMode::DirectIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw().mx().pxp(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xd2,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp ($10)"),
        mode: AddressMode::DirectIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(6).mm().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xd3,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp ($32,s),y"),
        mode: AddressMode::StackRelativeIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).mm(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xd4,
        mnemonic: "pei",
        name: "Push Effective Indirect address",
        example: Some("pei $12"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(6).pw(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xd5,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xd6,
        mnemonic: "dec",
        name: "Decrement",
        example: Some("dec $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).m2m().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xd7,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp [$10],y"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xd8,
        mnemonic: "cld",
        name: "CLear Decimal mode",
        example: Some("cld"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "....0... .",
    },
    InstructionData {
        code: 0xd9,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp $9876,y"),
        mode: AddressMode::AbsoluteIndexedY,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xda,
        mnemonic: "phx",
        name: "PusH X index",
        example: Some("phx"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(4).mx(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xdb,
        mnemonic: "stp",
        name: "SToP the clock",
        example: Some("stp"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(3),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xdc,
        mnemonic: "jmp",
        name: "JumP",
        example: Some("jmp [$1234]"),
        mode: AddressMode::AbsoluteIndirectLong,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xdd,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xde,
        mnemonic: "dec",
        name: "Decrement",
        example: Some("dec $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(9).m2m(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xdf,
        mnemonic: "cmp",
        name: "CoMPare with Accumulator",
        example: Some("cmp $fedcba,x"),
        mode: AddressMode::LongAbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "m.....mm .",
    },
    InstructionData {
        code: 0xe0,
        mnemonic: "cpx",
        name: "ComPare with X index",
        example: Some("cpx #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mx(),
        cyc: InstructionCycleInfo::from_u8(3).mx(),
        flag_result: "x.....xx .",
    },
    InstructionData {
        code: 0xe1,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc ($10,x)"),
        mode: AddressMode::DirectIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xe2,
        mnemonic: "sep",
        name: "SEt Processor status bits",
        example: Some("sep #$12"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(3),
        flag_result: "******** .",
    },
    InstructionData {
        code: 0xe3,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc $32,s"),
        mode: AddressMode::StackRelative,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xe4,
        mnemonic: "cpx",
        name: "ComPare with X index",
        example: Some("cpx $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mx().pw(),
        flag_result: "x.....xx .",
    },
    InstructionData {
        code: 0xe5,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(4).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xe6,
        mnemonic: "inc",
        name: "Increment",
        example: Some("inc $10"),
        mode: AddressMode::Direct,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).m2m().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xe7,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc [$10]"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xe8,
        mnemonic: "inx",
        name: "INcrement X index",
        example: Some("inx"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xe9,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc #$54"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3).mm(),
        cyc: InstructionCycleInfo::from_u8(3).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xea,
        mnemonic: "nop",
        name: "No OPeration",
        example: Some("nop"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xeb,
        mnemonic: "xba",
        name: "eXchange B and A accumulators",
        example: Some("xba"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(3),
        flag_result: "*.....*. .",
    },
    InstructionData {
        code: 0xec,
        mnemonic: "cpx",
        name: "ComPare with X index",
        example: Some("cpx $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mx(),
        flag_result: "x.....xx .",
    },
    InstructionData {
        code: 0xed,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xee,
        mnemonic: "inc",
        name: "Increment",
        example: Some("inc $9876"),
        mode: AddressMode::Absolute,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(8).m2m(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xef,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc $fedcba"),
        mode: AddressMode::LongAbsolute,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xf0,
        mnemonic: "beq",
        name: "Branch if EQual",
        example: Some("beq label"),
        mode: AddressMode::Relative8,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(2).pt().ptep(),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xf1,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc ($10),y"),
        mode: AddressMode::DirectIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw().mx().pxp(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xf2,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc ($10)"),
        mode: AddressMode::DirectIndirect,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(6).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xf3,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc ($32,s),y"),
        mode: AddressMode::StackRelativeIndirectIndexedY,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).mm(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xf4,
        mnemonic: "pea",
        name: "Push Effective Address",
        example: Some("pea #$1234"),
        mode: AddressMode::Immediate8,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(5),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xf5,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(5).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xf6,
        mnemonic: "inc",
        name: "Increment",
        example: Some("inc $10,x"),
        mode: AddressMode::DirectIndexedX,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(8).m2m().pw(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xf7,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc [$10],y"),
        mode: AddressMode::DirectIndirectLong,
        len: InstructionLengthInfo::from_u8(2),
        cyc: InstructionCycleInfo::from_u8(7).mm().pw(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xf8,
        mnemonic: "sed",
        name: "SEt Decimal mode",
        example: Some("sed"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: "....1... .",
    },
    InstructionData {
        code: 0xf9,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc $9876,y"),
        mode: AddressMode::AbsoluteIndexedY,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xfa,
        mnemonic: "plx",
        name: "PulL X index",
        example: Some("plx"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(5).mx(),
        flag_result: "x.....x. .",
    },
    InstructionData {
        code: 0xfb,
        mnemonic: "xce",
        name: "eXchange Carry and Emulation bits",
        example: Some("xce"),
        mode: AddressMode::Implied,
        len: InstructionLengthInfo::from_u8(1),
        cyc: InstructionCycleInfo::from_u8(2),
        flag_result: ".......* *",
    },
    InstructionData {
        code: 0xfc,
        mnemonic: "jsr",
        name: "Jump to SubRoutine",
        example: Some("jsr ($1234,x)"),
        mode: AddressMode::AbsoluteIndexedXIndirect,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(8),
        flag_result: "........ .",
    },
    InstructionData {
        code: 0xfd,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(6).mm().mx().pxp(),
        flag_result: "mm....mm .",
    },
    InstructionData {
        code: 0xfe,
        mnemonic: "inc",
        name: "Increment",
        example: Some("inc $9876,x"),
        mode: AddressMode::AbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(3),
        cyc: InstructionCycleInfo::from_u8(9).m2m(),
        flag_result: "m.....m. .",
    },
    InstructionData {
        code: 0xff,
        mnemonic: "sbc",
        name: "SuBtract with Carry",
        example: Some("sbc $fedcba,x"),
        mode: AddressMode::LongAbsoluteIndexedX,
        len: InstructionLengthInfo::from_u8(4),
        cyc: InstructionCycleInfo::from_u8(6).mm(),
        flag_result: "mm....mm .",
    },
];
